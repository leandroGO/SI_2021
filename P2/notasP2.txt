* 21/10: Diseño BD (actualiza.sql)
* 28/10: || + Procedimientos + triggers
* 04/11: Procedimients + triggers + integración
* 11/11: Integración con el portal
* 17/11 (miércoles hasta las 23:58): Integración con el portal

La base de datos dada puede tener tablas con atributos redundantes, que le
falten atributos, que las claves primarias/secundarias estén mal, que las
relaciones en general estén mal, o que la propia tabla falte.

En la tabla Customers puede haber clientes repetidos.

Ideas sueltas:
* DONE: ¿Si la clave primaria de inventory es el product_id (PK de products),
  se puede añadir a products los atributos de inventory (podrían valer NULL
  para indicar que esos productos existen pero no están disponibles en la
  tienda [siquiera están contemplados con stock=0])?
  + No, solo relacionarlas.

* DONE: Asociar actors, movieactor y movie igual que directors y eso.

* DONE (asocia orders y customers): Asociar customer y orderdetail (customer_id
  FK en la segunda).

* DONE: Hacer el campo status de orders de un tipo propio según la lista de
  status posibles del enunciado.

* DONE: ¿El campo numpartitipation de directormovies debería (además de ser
  numparticipation) ser clave primaria?
  + No debería

* DONE: ¿En customer, password debería ser char u otra cosa (guardamos el hash
  de la contraseña)?
  + Se guarda en claro.

* DONE: ¿En customer, deberíamos conocer expiration date e income?
  + Meh, no molesta.

* DONE: ¿En customer, address1 y address2 o atributo multivaluado?
  + Dejarlo así.

* DONE: ¿Los campos stock y sales deberían forzosamente ser positivos?

* ¿Llevar registro de número de ventas en inventory o hacer agregaciones de
  orderdetail?
  + Llevarlo en inventory.

* DONE: ¿Habría que crear tablas para genres, languages o countries tales que
  las tablas correspondientes moviegenre, ..., sean relaciones muchos a muchos
  con movie?
  + Crear tablas.

* DONE: En imdb_movies, el atributo year es de tipo text (debería ser otra
  cosa).
  - Hay dos películas con 1998-1999 como year. ¿Escoger uno o dejarlo así?
    - Tomamos el primero (aparece también en los títulos de dichas películas)

* DONE: Asociar orderdetail como relación muchos a muchos entre order y
  product.
  - Todo bien salvo que hay filas con (orderid, prod_id) repetidos. ¿Sumar
    quantity (¿cómo hacerlo?) o escoger uno? ¿Es admisible crear una nueva
    tabla que sea así, eliminar orderdetail y renombrar la nueva orderdetail?
    + Sí

* ¿En imdb_actors, el atributo gender debería ser varying(1)?
  - Meh

* ¿En customer, cambiar age por birthdate?
  - Meh

* ¿Redundancia de country, region, state, city, zipcode en customer?
  + MIRAR LOS DATOS, y si no se usan, eliminarlos.

* Para llamar un script dentro de otro script sql:
  \ir 'script'
        (^ ruta relativa)

Semana 2 ----------------------------------------------------------------------
* Procedimientos almacenados => Funciones en PostgreSQL
    CREATE OR REPLACE FUNCTION ...
        ...
    END;
    $$ LANGUAGE [SQL/PLPGSQL]

* Triggers
    1. Declarar función
    2. Declarar trigger especificando cuándo se ejecuará la función
        DROP TRIGGER IF EXISTS ... ON ...<tabla que va a generar el evento>...
        CREATE TRIGGER ...
            AFTER/BEFORE ... ON ...
            ...
            EXECUTE PROCEDURE ...
    3. Trabajar con las tablas NEW y OLD


* www.postgresql.org/docs/9.1/plpgsql-function.html

* www.postgresql.org/docs/9.1/plpgsql-trigger.html

Semana 3 ----------------------------------------------------------------------
SQLAlchemy:     (se detallará más en la P3)
* Más seguro trabajar con los constructores del lenguaje (p. e. evita
  inyecciones).
* Crear engine de BD, establecer conexión, hacer cosas, cerrar conexión.
